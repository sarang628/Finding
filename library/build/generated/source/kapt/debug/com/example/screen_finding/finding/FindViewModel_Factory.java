// Generated by Dagger (https://dagger.dev).
package com.example.screen_finding.finding;

import com.example.torang_core.repository.FilterRepository;
import com.example.torang_core.repository.FindRepository;
import com.example.torang_core.repository.MapRepository;
import com.example.torang_core.repository.NationRepository;
import com.example.torang_core.repository.SearchRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class FindViewModel_Factory implements Factory<FindViewModel> {
  private final Provider<SearchRepository> searchRepositoryProvider;

  private final Provider<FindRepository> findingRepositoryProvider;

  private final Provider<FilterRepository> filterRepositoryProvider;

  private final Provider<MapRepository> mapRepositoryProvider;

  private final Provider<NationRepository> nationRepositoryProvider;

  public FindViewModel_Factory(Provider<SearchRepository> searchRepositoryProvider,
      Provider<FindRepository> findingRepositoryProvider,
      Provider<FilterRepository> filterRepositoryProvider,
      Provider<MapRepository> mapRepositoryProvider,
      Provider<NationRepository> nationRepositoryProvider) {
    this.searchRepositoryProvider = searchRepositoryProvider;
    this.findingRepositoryProvider = findingRepositoryProvider;
    this.filterRepositoryProvider = filterRepositoryProvider;
    this.mapRepositoryProvider = mapRepositoryProvider;
    this.nationRepositoryProvider = nationRepositoryProvider;
  }

  @Override
  public FindViewModel get() {
    return newInstance(searchRepositoryProvider.get(), findingRepositoryProvider.get(), filterRepositoryProvider.get(), mapRepositoryProvider.get(), nationRepositoryProvider.get());
  }

  public static FindViewModel_Factory create(Provider<SearchRepository> searchRepositoryProvider,
      Provider<FindRepository> findingRepositoryProvider,
      Provider<FilterRepository> filterRepositoryProvider,
      Provider<MapRepository> mapRepositoryProvider,
      Provider<NationRepository> nationRepositoryProvider) {
    return new FindViewModel_Factory(searchRepositoryProvider, findingRepositoryProvider, filterRepositoryProvider, mapRepositoryProvider, nationRepositoryProvider);
  }

  public static FindViewModel newInstance(SearchRepository searchRepository,
      FindRepository findingRepository, FilterRepository filterRepository,
      MapRepository mapRepository, NationRepository nationRepository) {
    return new FindViewModel(searchRepository, findingRepository, filterRepository, mapRepository, nationRepository);
  }
}
