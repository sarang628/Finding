// Generated by Dagger (https://dagger.dev).
package com.example.screen_finding.finding;

import com.example.torang_core.repository.FindRepository;
import com.example.torang_core.repository.SearchRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class TestFindViewModel_Factory implements Factory<TestFindViewModel> {
  private final Provider<SearchRepository> searchRepositoryProvider;

  private final Provider<FindRepository> findingRepositoryProvider;

  public TestFindViewModel_Factory(Provider<SearchRepository> searchRepositoryProvider,
      Provider<FindRepository> findingRepositoryProvider) {
    this.searchRepositoryProvider = searchRepositoryProvider;
    this.findingRepositoryProvider = findingRepositoryProvider;
  }

  @Override
  public TestFindViewModel get() {
    return newInstance(searchRepositoryProvider.get(), findingRepositoryProvider.get());
  }

  public static TestFindViewModel_Factory create(
      Provider<SearchRepository> searchRepositoryProvider,
      Provider<FindRepository> findingRepositoryProvider) {
    return new TestFindViewModel_Factory(searchRepositoryProvider, findingRepositoryProvider);
  }

  public static TestFindViewModel newInstance(SearchRepository searchRepository,
      FindRepository findingRepository) {
    return new TestFindViewModel(searchRepository, findingRepository);
  }
}
